package com.example.exchangerates.data.remote

import io.ktor.client.engine.mock.MockEngine
import io.ktor.client.engine.mock.MockRequestHandleScope
import io.ktor.client.engine.mock.respond
import io.ktor.client.engine.mock.respondError
import io.ktor.client.request.HttpRequestData
import io.ktor.client.request.HttpResponseData
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.http.headersOf
import kotlinx.coroutines.delay
import kotlin.random.Random
import kotlin.random.nextInt
import kotlin.time.Duration.Companion.milliseconds

fun createMockEngine() =
    MockEngine { request ->
        when (request.url.rawSegments.lastOrNull()) {
            RATES_PATH -> createCurrencyRatesResponse(request)
            CURRENCIES_PATH -> createCurrenciesResponse()
            else -> respondError(status = HttpStatusCode.NotFound)
        }
    }

private suspend fun MockRequestHandleScope.createCurrenciesResponse(): HttpResponseData {
    delay(Random.nextInt(100..2000).milliseconds)
    return if (Random.nextInt(1..100) > 10) {
        val currencies = BaseUsdRates.keys
            .joinToString { currency -> "\"$currency\"" }
        respond(
            content = "[$currencies]",
            headers = headersOf("Content-Type" to listOf(ContentType.Application.Json.toString())),
        )
    } else {
        respondError(
            status = HttpStatusCode.InternalServerError,
            content = "Mocked error",
        )
    }
}

private suspend fun MockRequestHandleScope.createCurrencyRatesResponse(request: HttpRequestData): HttpResponseData {
    delay(Random.nextInt(100..2000).milliseconds)
    val baseCurrency = request.url.parameters[BASE_CURRENCY_PARAM] ?: return respondError(
        status = HttpStatusCode.BadRequest,
        content = "Missing `$BASE_CURRENCY_PARAM` query parameter",
    )
    val currencies =
        request.url.parameters[CURRENCIES_PARAM]?.split(',')?.toSet() ?: return respondError(
            status = HttpStatusCode.BadRequest,
            content = "Missing `$CURRENCIES_PARAM` query parameter",
        )
    if (currencies.isEmpty()) return respondError(
        status = HttpStatusCode.BadRequest,
        content = "Empty `$CURRENCIES_PARAM` parameter specified",
    )
    val ratio = BaseUsdRates[baseCurrency] ?: return respondError(
        status = HttpStatusCode.BadRequest,
        content = "Unsupported base currency `$baseCurrency`",
    )
    return if (Random.nextInt(1..100) > 10) {
        val rates = BaseUsdRates.filterKeys(currencies::contains)
            .mapValues { (_, rate) -> (rate * ratio).randomVariance() }
            .toList()
            .joinToString { (currency, rate) -> "\"$currency\": $rate" }
        respond(
            content =
                """
                {
                    "base":"$baseCurrency",
                    "rates": { $rates }
                }
                """.trimIndent(),
            headers = headersOf("Content-Type" to listOf(ContentType.Application.Json.toString())),
        )
    } else {
        respondError(
            status = HttpStatusCode.InternalServerError,
            content = "Mocked error",
        )
    }
}

private fun Double.randomVariance(): Double {
    val maxVariance = this * 0.01
    val variance = Random.nextDouble(-maxVariance, maxVariance)
    return this + variance
}

internal val BaseUsdRates = mapOf<String, Double>(
    "1inch" to 6.06385369,
    "aave" to 0.0074584923,
    "ada" to 1.588681,
    "aed" to 3.6725,
    "afn" to 71.62653436,
    "agix" to 5.93872212,
    "akt" to 1.01315815,
    "algo" to 5.87352616,
    "all" to 90.44084678,
    "amd" to 390.26690909,
    "amp" to 295.24421365,
    "ang" to 1.79016713,
    "aoa" to 920.20297661,
    "ape" to 2.45702122,
    "apt" to 0.22236598,
    "ar" to 0.19095115,
    "arb" to 3.58890454,
    "ars" to 1075.29822968,
    "atom" to 0.22907337,
    "ats" to 12.55635138,
    "aud" to 1.66246204,
    "avax" to 0.058085919,
    "awg" to 1.79,
    "axs" to 0.40946757,
    "azm" to 8499.99991702,
    "azn" to 1.69999998,
    "bake" to 8.89735172,
    "bam" to 1.78470591,
    "bat" to 8.31490807,
    "bbd" to 2.0,
    "bch" to 0.003574508,
    "bdt" to 121.71433398,
    "bef" to 36.81038634,
    "bgn" to 1.78470591,
    "bhd" to 0.376,
    "bif" to 2974.17583696,
    "bmd" to 1.0,
    "bnb" to 0.0017811654,
    "bnd" to 1.350318,
    "bob" to 6.94159061,
    "brl" to 5.91403966,
    "bsd" to 1.0,
    "bsv" to 0.03630953,
    "bsw" to 59.71242058,
    "btc" to 0.0000124501,
    "btcb" to 6.76833734,
    "btg" to 1.10595424,
    "btn" to 85.92749271,
    "btt" to 1700138.29238563,
    "busd" to 0.99877481,
    "bwp" to 13.82541083,
    "byn" to 3.27000386,
    "byr" to 32700.03855601,
    "bzd" to 2.01547087,
    "cad" to 1.41836059,
    "cake" to 0.57317678,
    "cdf" to 2906.49511011,
    "celo" to 3.59397221,
    "cfx" to 13.99476782,
    "chf" to 0.85725188,
    "chz" to 25.66950589,
    "clp" to 987.56785794,
    "cnh" to 7.35094359,
    "cny" to 7.33595722,
    "comp" to 0.024980419,
    "cop" to 4388.11935367,
    "crc" to 510.44053108,
    "cro" to 11.53597879,
    "crv" to 2.12400104,
    "cspr" to 113.65866547,
    "cuc" to 1.0,
    "cup" to 24.03653941,
    "cve" to 100.62199713,
    "cvx" to 0.564588,
    "cyp" to 0.53406583,
    "czk" to 23.0339351,
    "dai" to 0.99987618,
    "dash" to 0.050477958,
    "dcr" to 0.088443982,
    "dem" to 1.78470591,
    "dfi" to 125.53726353,
    "djf" to 178.19259668,
    "dkk" to 6.81342084,
    "doge" to 6.59434549,
    "dop" to 63.11257438,
    "dot" to 0.273948,
    "dydx" to 1.76944878,
    "dzd" to 133.59046417,
    "eek" to 14.27764728,
    "egld" to 0.075360599,
    "egp" to 51.39249317,
    "enj" to 14.7406604,
    "eos" to 1.29615158,
    "ern" to 15.0,
    "esp" to 151.82816372,
    "etb" to 132.27601689,
    "etc" to 0.067765756,
    "eth" to 0.000632333,
    "eur" to 0.91250564,
    "fei" to 1.00509186,
    "fil" to 0.41786967,
    "fim" to 5.42551217,
    "fjd" to 2.3385274,
    "fkp" to 0.78278649,
    "flow" to 2.99560395,
    "flr" to 84.04688082,
    "frax" to 1.00112915,
    "frf" to 5.98564463,
    "ftt" to 1.08416457,
    "fxs" to 0.58675319,
    "gala" to 73.79308423,
    "gbp" to 0.78278649,
    "gel" to 2.75217599,
    "ggp" to 0.78278649,
    "ghc" to 155044.34636312,
    "ghs" to 15.50443464,
    "gip" to 0.78278649,
    "gmd" to 72.1321004,
    "gmx" to 0.07884878,
    "gnf" to 8665.20208354,
    "gno" to 0.0099463238,
    "grd" to 310.93629746,
    "grt" to 13.10831213,
    "gt" to 0.048141352,
    "gtq" to 7.71935932,
    "gusd" to 1.00010814,
    "gyd" to 210.16551802,
    "hbar" to 6.53580581,
    "hkd" to 7.77024398,
    "hnl" to 25.61140945,
    "hnt" to 0.3785209,
    "hot" to 1086.58031101,
    "hrk" to 6.87527376,
    "ht" to 2.5263937,
    "htg" to 131.11240993,
    "huf" to 371.61738607,
    "icp" to 0.21053453,
    "idr" to 16853.84457595,
    "iep" to 0.71865659,
    "ils" to 3.77796709,
    "imp" to 0.78278649,
    "imx" to 2.46316756,
    "inj" to 0.13479456,
    "inr" to 85.92749271,
    "iqd" to 1311.7755697,
    "irr" to 42102.49228287,
    "isk" to 132.22268337,
    "itl" to 1766.85729912,
    "jep" to 0.78278649,
    "jmd" to 157.974,
    "jod" to 0.709,
    "jpy" to 147.57224281,
    "kas" to 15.73941639,
    "kava" to 2.36087893,
    "kcs" to 0.11020148,
    "kda" to 2.66572361,
    "kes" to 129.54624806,
    "kgs" to 86.7965705,
    "khr" to 4005.92529101,
    "klay" to 10.08866969,
    "kmf" to 448.92334748,
    "knc" to 3.44767487,
    "kpw" to 900.02630353,
    "krw" to 1470.52090509,
    "ksm" to 0.077203577,
    "kwd" to 0.3079235,
    "kyd" to 0.82941741,
    "kzt" to 521.12193201,
    "lak" to 21701.31060716,
    "lbp" to 89777.72920122,
    "ldo" to 1.42042522,
    "leo" to 0.1110944,
    "link" to 0.08583058,
    "lkr" to 297.51526026,
    "lrc" to 11.84236212,
    "lrd" to 200.17125539,
    "lsl" to 19.50667672,
    "ltc" to 0.013902106,
    "ltl" to 3.15069948,
    "luf" to 36.81038634,
    "luna" to 5.8818783,
    "lunc" to 17470.11977837,
    "lvl" to 0.64130897,
    "lyd" to 4.82762334,
    "mad" to 9.54249938,
    "mana" to 4.6164419,
    "mbx" to 6.55003902,
    "mdl" to 17.77017808,
    "mga" to 4667.31475245,
    "mgf" to 23336.57376224,
    "mina" to 4.84348057,
    "mkd" to 56.20762135,
    "mkr" to 0.00079774909,
    "mmk" to 2099.27100907,
    "mnt" to 3508.57394223,
    "mop" to 8.0033513,
    "mro" to 398.14205442,
    "mru" to 39.81420544,
    "mtl" to 0.39173867,
    "mur" to 45.14830197,
    "mvr" to 15.44363709,
    "mwk" to 1736.24039688,
    "mxn" to 20.64308785,
    "mxv" to 2.44971577,
    "myr" to 4.49128216,
    "mzm" to 63885.95736823,
    "mzn" to 63.88595737,
    "nad" to 19.50667672,
    "near" to 0.46982473,
    "neo" to 0.20591565,
    "nexo" to 1.00265924,
    "nft" to 2461174.19739383,
    "ngn" to 1571.63152558,
    "nio" to 36.83048444,
    "nlg" to 2.01089781,
    "nok" to 10.92594054,
    "npr" to 137.54843395,
    "nzd" to 1.79671658,
    "okb" to 0.019639403,
    "omr" to 0.38496657,
    "one" to 102.32095861,
    "op" to 1.60088517,
    "ordi" to 0.15271231,
    "pab" to 1.0,
    "paxg" to 0.00033075034,
    "pen" to 3.70127893,
    "pepe" to 153019.91523762,
    "pgk" to 4.12236115,
    "php" to 57.28734072,
    "pkr" to 280.80384867,
    "pln" to 3.9228308,
    "pte" to 182.94095609,
    "pyg" to 8031.69616034,
    "qar" to 3.64,
    "qnt" to 0.015566006,
    "qtum" to 0.56751143,
    "rol" to 45420.17854712,
    "ron" to 4.54201785,
    "rpl" to 0.2718236,
    "rsd" to 106.91851434,
    "rub" to 86.12510032,
    "rune" to 0.94500232,
    "rvn" to 99.48915161,
    "rwf" to 1434.60455369,
    "sand" to 4.09995641,
    "sar" to 3.75,
    "sbd" to 8.41970988,
    "scr" to 14.34753133,
    "sdd" to 60048.8760979,
    "sdg" to 600.48876098,
    "sek" to 10.01062493,
    "sgd" to 1.350318,
    "shib" to 86223.22927776,
    "shp" to 0.78278649,
    "sit" to 218.67285201,
    "skk" to 27.49014497,
    "sle" to 22.7745897,
    "sll" to 22774.58970242,
    "snx" to 1.58879335,
    "sol" to 0.0090627007,
    "sos" to 571.75946618,
    "spl" to 0.16666667,
    "srd" to 36.64393942,
    "srg" to 36643.9394246,
    "std" to 22520.90392491,
    "stn" to 22.52090392,
    "stx" to 1.76433828,
    "sui" to 0.48261883,
    "svc" to 8.75,
    "syp" to 13001.86091179,
    "szl" to 19.50667672,
    "thb" to 34.62433436,
    "theta" to 1.38181248,
    "tjs" to 10.87027515,
    "tmm" to 17490.92662536,
    "tmt" to 3.49818533,
    "tnd" to 3.07042822,
    "ton" to 0.3205473,
    "top" to 2.42632329,
    "trl" to 38013918.97898098,
    "trx" to 4.33375989,
    "try" to 38.01391898,
    "ttd" to 6.78897466,
    "tusd" to 1.0015956,
    "tvd" to 1.66246204,
    "twd" to 33.02719696,
    "twt" to 1.31208951,
    "tzs" to 2685.49434195,
    "uah" to 41.15282901,
    "ugx" to 3706.01807695,
    "uni" to 0.19142327,
    "usd" to 1.0,
    "usdc" to 0.99963151,
    "usdd" to 1.0002883,
    "usdp" to 0.9997523,
    "usdt" to 0.99999102,
    "uyu" to 42.1926062,
    "uzs" to 12974.86723309,
    "val" to 1766.85729912,
    "veb" to 7326640454.520488,
    "ved" to 73.26604494,
    "vef" to 7326604.49377575,
    "ves" to 73.26604494,
    "vet" to 48.43131583,
    "vnd" to 25860.69284732,
    "vuv" to 125.41653287,
    "waves" to 1.03661318,
    "wemix" to 1.99340314,
    "woo" to 16.26696605,
    "wst" to 2.8697578,
    "xaf" to 598.5644633,
    "xag" to 0.033223917,
    "xau" to 0.0003335071,
    "xaut" to 0.00033206044,
    "xbt" to 0.0000124501,
    "xcd" to 2.7068029,
    "xcg" to 1.79016713,
    "xch" to 0.097216651,
    "xdc" to 14.80555883,
    "xdr" to 0.74957216,
    "xec" to 56313.02571765,
    "xem" to 71.25441938,
    "xlm" to 4.26301292,
    "xmr" to 0.004878208,
    "xof" to 598.5644633,
    "xpd" to 0.0010911124,
    "xpf" to 108.89088805,
    "xpt" to 0.0010777318,
    "xrp" to 0.5233352,
    "xtz" to 1.65111486,
    "yer" to 245.79850483,
    "zar" to 19.50667672,
    "zec" to 0.02875522,
    "zil" to 97.03271564,
    "zmk" to 27931.96955693,
    "zmw" to 27.93196956,
    "zwd" to 361.9,
    "zwg" to 26.77552439,
    "zwl" to 66904.65075927
)
